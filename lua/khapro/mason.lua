-- Ensure that the mason plugin is loaded
-- require('mason').setup()
--
-- -- Install LSP servers, linters, formatters, etc.
-- require('mason-lspconfig').setup {
--     ensure_installed = { "gopls"} -- List of servers to be installed
-- }
--
-- -- ~/.config/nvim/lua/khapro/lspconfig.lua
-- local lspconfig = require('lspconfig')
-- -- Configure gopls with custom settings
-- lspconfig.gopls.setup {
--   settings = {
--     gopls = {
--       gofumpt = true,
--       codelenses = {
--         gc_details = false,
--         generate = true,
--         regenerate_cgo = true,
--         run_govulncheck = true,
--         test = true,
--         tidy = true,
--         upgrade_dependency = true,
--         vendor = true,
--       },
--       hints = {
--         assignVariableTypes = true,
--         compositeLiteralFields = true,
--         compositeLiteralTypes = true,
--         constantValues = true,
--         functionTypeParameters = true,
--         parameterNames = true,
--         rangeVariableTypes = true,
--       },
--       analyses = {
--         fieldalignment = true,
--         nilness = true,
--         unusedparams = true,
--         unusedwrite = true,
--         useany = true,
--       },
--       usePlaceholders = true,
--       completeUnimported = true,
--       staticcheck = true,
--       directoryFilters = { "-.git", "-.vscode", "-.idea", "-.vscode-test", "-node_modules" },
--       semanticTokens = true,
--     },
--   },
--   on_attach = function(client, _)
--     -- Workaround for gopls not supporting semanticTokensProvider
--     if not client.server_capabilities.semanticTokensProvider then
--       local semantic = client.config.capabilities.textDocument.semanticTokens
--       client.server_capabilities.semanticTokensProvider = {
--         full = true,
--         legend = {
--           tokenTypes = semantic.tokenTypes,
--           tokenModifiers = semantic.tokenModifiers,
--         },
--         range = true,
--       }
--     end
--   end,
-- }

